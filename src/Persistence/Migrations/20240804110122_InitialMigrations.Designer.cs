// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OnlineCoursesDbContext))]
    [Migration("20240804110122_InitialMigrations")]
    partial class InitialMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Domain.Course", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44470082-5de4-4647-a423-7d270d42faf1"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6286),
                            Title = "Small Concrete Shirt"
                        },
                        new
                        {
                            Id = new Guid("e1298ad7-b3b7-458f-8069-eeec55f8d7d0"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6316),
                            Title = "Incredible Plastic Fish"
                        },
                        new
                        {
                            Id = new Guid("ff333ee9-81da-4b6f-98f4-7a53666f9bf9"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6342),
                            Title = "Handcrafted Plastic Chair"
                        },
                        new
                        {
                            Id = new Guid("50b12adf-8a8a-4839-8ad3-7f0fba0bc4ca"),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6362),
                            Title = "Unbranded Soft Table"
                        },
                        new
                        {
                            Id = new Guid("92792d35-5127-4183-9c94-f245296c0580"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6380),
                            Title = "Sleek Concrete Shoes"
                        },
                        new
                        {
                            Id = new Guid("c05bf9d1-6701-4b16-9569-140c3c9ac694"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6397),
                            Title = "Unbranded Metal Chair"
                        },
                        new
                        {
                            Id = new Guid("cacfed7f-bcdf-4a8b-9007-fe5ea19e78dd"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6416),
                            Title = "Rustic Steel Bacon"
                        },
                        new
                        {
                            Id = new Guid("8aac6cff-a1da-48de-986b-64f432ea527a"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6444),
                            Title = "Licensed Soft Sausages"
                        },
                        new
                        {
                            Id = new Guid("e0eafc4f-df5b-405c-8383-b2d4995884e4"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 8, 4, 11, 1, 22, 50, DateTimeKind.Utc).AddTicks(6459),
                            Title = "Fantastic Concrete Tuna"
                        });
                });

            modelBuilder.Entity("Domain.CourseInstructor", b =>
                {
                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_instructors", (string)null);
                });

            modelBuilder.Entity("Domain.CoursePrice", b =>
                {
                    b.Property<Guid?>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_prices", (string)null);
                });

            modelBuilder.Entity("Domain.Instructor", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("152a5e56-7011-45cd-9d43-ab188e044a5c"),
                            AcademicDegree = "Principal Mobility Designer",
                            FirstName = "Zachery",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("b7fdc041-f682-4290-88d5-a96ed0c75b0a"),
                            AcademicDegree = "Future Brand Developer",
                            FirstName = "Mekhi",
                            LastName = "Torp"
                        },
                        new
                        {
                            Id = new Guid("c8448252-830a-4520-a434-eb15041fe016"),
                            AcademicDegree = "Direct Group Developer",
                            FirstName = "Kaley",
                            LastName = "Watsica"
                        },
                        new
                        {
                            Id = new Guid("168a59f8-887e-4ecb-972d-c851c6456a2e"),
                            AcademicDegree = "Forward Identity Designer",
                            FirstName = "Asa",
                            LastName = "Ziemann"
                        },
                        new
                        {
                            Id = new Guid("9408973c-d62a-456d-8538-e64f9428d97a"),
                            AcademicDegree = "Internal Configuration Facilitator",
                            FirstName = "Khalid",
                            LastName = "Schneider"
                        },
                        new
                        {
                            Id = new Guid("2bd0a8f5-ff77-46ce-8c21-6ed9c32f4458"),
                            AcademicDegree = "International Mobility Planner",
                            FirstName = "Aniyah",
                            LastName = "Kuvalis"
                        },
                        new
                        {
                            Id = new Guid("3d9a352d-994e-4735-86d9-61d8258e88ba"),
                            AcademicDegree = "Regional Directives Technician",
                            FirstName = "Jordon",
                            LastName = "Fisher"
                        },
                        new
                        {
                            Id = new Guid("fede0017-9297-404e-a855-56b6522e8e0b"),
                            AcademicDegree = "Customer Interactions Consultant",
                            FirstName = "Megane",
                            LastName = "Price"
                        },
                        new
                        {
                            Id = new Guid("4762fb41-032a-449f-b4d4-6fcb9c8acc31"),
                            AcademicDegree = "Corporate Group Engineer",
                            FirstName = "Laverna",
                            LastName = "Keeling"
                        },
                        new
                        {
                            Id = new Guid("f4f45d79-28d3-465f-b712-2637a81e7d4b"),
                            AcademicDegree = "Chief Quality Architect",
                            FirstName = "Kenna",
                            LastName = "Renner"
                        });
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ActualPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PromotionalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b26ce59-03cd-4571-877e-871c8f16437e"),
                            ActualPrice = 10.0m,
                            Name = "Regular Price",
                            PromotionalPrice = 8.0m
                        });
                });

            modelBuilder.Entity("Domain.Qualification", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("qualifications", (string)null);
                });

            modelBuilder.Entity("Domain.CourseInstructor", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.CoursePrice", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("Photos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Qualification", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("Qualifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Photos");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Domain.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
