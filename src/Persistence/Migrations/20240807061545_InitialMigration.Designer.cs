// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OnlineCoursesDbContext))]
    [Migration("20240807061545_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af35b163-ed36-4e5a-bff6-879bcb8b97d8"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2231),
                            Title = "Awesome Metal Chips"
                        },
                        new
                        {
                            Id = new Guid("d8259fb7-c1ac-4a1c-abda-1abc98560568"),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2259),
                            Title = "Ergonomic Metal Chair"
                        },
                        new
                        {
                            Id = new Guid("090be071-43eb-42bc-a5a4-80387015f4e9"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2408),
                            Title = "Intelligent Metal Table"
                        },
                        new
                        {
                            Id = new Guid("a0e9f264-fbbc-441a-b584-2a6b574ca99f"),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2431),
                            Title = "Ergonomic Concrete Sausages"
                        },
                        new
                        {
                            Id = new Guid("e7669ae2-177f-4127-91a0-651e8ac10053"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2449),
                            Title = "Awesome Wooden Soap"
                        },
                        new
                        {
                            Id = new Guid("d488e230-1bca-45c3-8acb-d02eb61eaa68"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2482),
                            Title = "Gorgeous Fresh Chips"
                        },
                        new
                        {
                            Id = new Guid("013f9729-83fd-4136-a5af-917f4fd04caf"),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2500),
                            Title = "Incredible Fresh Tuna"
                        },
                        new
                        {
                            Id = new Guid("2383e465-8f0f-4969-885c-dc32a0c21343"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2519),
                            Title = "Generic Granite Sausages"
                        },
                        new
                        {
                            Id = new Guid("a0a6c6d2-6e40-4c8e-b60b-c23bc4a6a84a"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            PublicationDate = new DateTime(2024, 8, 7, 6, 15, 44, 803, DateTimeKind.Utc).AddTicks(2536),
                            Title = "Generic Metal Shirt"
                        });
                });

            modelBuilder.Entity("Domain.CourseInstructor", b =>
                {
                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_instructors", (string)null);
                });

            modelBuilder.Entity("Domain.CoursePrice", b =>
                {
                    b.Property<Guid?>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_prices", (string)null);
                });

            modelBuilder.Entity("Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d837e48-9833-422b-9058-40a9dd5bde7b"),
                            AcademicDegree = "Direct Functionality Liaison",
                            FirstName = "Emily",
                            LastName = "Moore"
                        },
                        new
                        {
                            Id = new Guid("2b347b72-e246-4e14-a359-5c924b82e138"),
                            AcademicDegree = "Principal Directives Consultant",
                            FirstName = "Lew",
                            LastName = "Veum"
                        },
                        new
                        {
                            Id = new Guid("a49dea58-6ed3-4358-8f0e-03172d27e373"),
                            AcademicDegree = "Chief Accountability Supervisor",
                            FirstName = "Haley",
                            LastName = "Bayer"
                        },
                        new
                        {
                            Id = new Guid("47fa107b-3f04-4ad7-9019-e271c79c9ad8"),
                            AcademicDegree = "Corporate Solutions Orchestrator",
                            FirstName = "Marcellus",
                            LastName = "Hermann"
                        },
                        new
                        {
                            Id = new Guid("7354a458-5ca4-47a3-9ff9-de5ebcc4107a"),
                            AcademicDegree = "Product Infrastructure Liaison",
                            FirstName = "Angelita",
                            LastName = "Wolf"
                        },
                        new
                        {
                            Id = new Guid("1cef0982-10eb-475d-8719-acced171a8c6"),
                            AcademicDegree = "Corporate Branding Manager",
                            FirstName = "Leatha",
                            LastName = "Trantow"
                        },
                        new
                        {
                            Id = new Guid("ccec0afb-c63f-4f24-83df-f54e80ceba61"),
                            AcademicDegree = "Corporate Functionality Consultant",
                            FirstName = "Matt",
                            LastName = "Heaney"
                        },
                        new
                        {
                            Id = new Guid("e8bb3582-9681-43bf-925a-8df3d62fbbf6"),
                            AcademicDegree = "Senior Paradigm Developer",
                            FirstName = "Emery",
                            LastName = "King"
                        },
                        new
                        {
                            Id = new Guid("45d97b7b-651e-4005-a129-feec9fed4e9c"),
                            AcademicDegree = "Corporate Infrastructure Executive",
                            FirstName = "Markus",
                            LastName = "Pagac"
                        },
                        new
                        {
                            Id = new Guid("e8f16c5c-6db2-4a9b-9634-df9750a5d2e4"),
                            AcademicDegree = "Legacy Infrastructure Orchestrator",
                            FirstName = "Luella",
                            LastName = "Goyette"
                        });
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ActualPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("PromotionalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b1c976a-9d91-4114-8879-7b9710d2364c"),
                            ActualPrice = 10.0m,
                            Name = "Regular Price",
                            PromotionalPrice = 8.0m
                        });
                });

            modelBuilder.Entity("Domain.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("qualifications", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "34541f26-18ad-4cf5-84a4-ee5484e76131",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1a0e1180-d414-455e-85a6-963b5c44032d",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_UPDATE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_WRITE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_DELETE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_DELETE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "34541f26-18ad-4cf5-84a4-ee5484e76131"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "1a0e1180-d414-455e-85a6-963b5c44032d"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "1a0e1180-d414-455e-85a6-963b5c44032d"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "1a0e1180-d414-455e-85a6-963b5c44032d"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "1a0e1180-d414-455e-85a6-963b5c44032d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.CourseInstructor", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.CoursePrice", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("Photos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Qualification", b =>
                {
                    b.HasOne("Domain.Course", "Course")
                        .WithMany("Qualifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Persistence.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Photos");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Domain.Instructor", b =>
                {
                    b.Navigation("CourseInstructors");
                });

            modelBuilder.Entity("Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
